#+TITLE: ازاي تكتب برنامج
#+AUTHOR: Yousef Ghazy
#+OPTIONS: toc:nil

انت حاليا نقدر نقول عليك عندك المعرفه الكافيه اللي تخليك قادر انك تعمل اول برنامج حقيقي ليك.

في المحاضره دي واللي جايه، احنا هنتكلم عن ازاي 

هدفنا نديك فكره شكل ونوع التفكير اللي بيحصل وانت بتكتب كود. واثناء ما احنا بنعمل دا، هنتكلم عن تنظيم البرنامج، user-defined types، ومعالجه الinput.

* الفهرس :toc:
- [[#ايجاد-مشكله][ايجاد مشكله]]
  - [[#مراحل-التطوير][مراحل التطوير]]

* ايجاد مشكله
كتابة برنامج بتبدأ بمشكلة؛ يعني عندك مشكلة وعايز برنامج يساعدك تحلها. فهم المشكلة دي هو المفتاح لبرنامج كويس. لأن في الأول والاخر، البرنامج اللي بيحل مشكلة غلط مش هيبقى مفيد، حتى لو كان معمول بشكل كويس. أوقات بيحصل صدفة حلوة لما برنامج يطلع نافع في حاجة ماكانش معمول عشانها، بس مينفعش نعتمد على الحظ ده. احنا عايزين برنامج يحل المشكلة اللي حددناها بشكل بسيط ونضيف.

في المرحلة دي، ايه البرنامج اللي ينفع نشتغل عليه؟ برنامج:
- يوضح design و programming techniques
- يدينا فرصه نكتشف نوع القرارات اللي المبرمج بياخدها وليه
- مش بيحتاج حاجات كتير جديدة من اللغة
- معقد كفايه يخليك تفكر في تصميمه
- فيه كذا طريقه للحل
- بيحل مشكله مفهومه
- مشكله تستاهل تتحل
- وحلها صغير كفايه نعرضه ونفهمه كله

احنا اخترنالك برنامج يحل عمليات حسابيه بسيطه،  يعني من الاخر نكتب calculator بسيطه.

علي سبيل المثال البرنامج المفروض يتصرف بالشكل الاتي:

#+begin_src text
> 2 + 3.1 * 4
= 14.4
> (2 + 3.1) * 4
= 20.4
#+end_src

للأسف البرنامج دا مش بيعمل حاجه مهياش بالفعل موجوده علي كل كمبيوتر وكل تليفون، بس انك تعمل برنامج ثوري هيبقي too much to ask for في المرحله اللي احنا فيها دي.

طيب نبدأ إزاي؟ ببساطة، فكر شوية في المشكلة وإزاي تتحل. في الأول، فكر البرنامج المفروض يعمل إيه وعايز تتعامل معاه إزاي. بعد كده، فكر البرنامج ممكن يتكتب إزاي عشان يعمل كده. جرب تكتب فكرة سريعة كده للحل وشوف فيها إيه غلط. ممكن كمان تناقش المشكلة مع صاحبك. إنك تشرح حاجة لحد تاني وسيلة ممتازة تكتشف بيها الغلط في أفكارك، أحسن كمان من إنك تكتبهم؛ الورق (أو الكمبيوتر) مش بيرد عليك ويشككك في افتراضاتك. المفروض إن الـdesign ميبقاش شغل فردي.

للأسف، مفيش خطة عامة لحل المشاكل تنفع لكل الناس وكل المشاكل. في كتب كتير بتقول إنها هتخليك أحسن في حل المشاكل، وفي فرع تاني ضخم بيتكلم عن الprogram design. احنا مش هندخل في ده دلوقتي. هنقدم بدل كده شوية اقتراحات في صفحة واحدة لإستراتيجية تنفع للمشاكل الصغيرة اللي ممكن تقابل شخص لوحده. وبعد كده، هنبدأ نطبق الاقتراحات دي على مشكلة الكالكوليتر الصغيرة بتاعتنا.

وإنت بتقرا المناقشة بتاعت برنامج الكالكوليتر، حاول تكون شكاك أكتر من العادي. عشان نخلي الموضوع واقعي، هنعمل البرنامج خطوة بخطوة، وهنشرح التفكير اللي بيقود كل نسخه. وطبعًا، جزء كبير من التفكير ده هيبقى ناقص أو غلط، لأن لو كان كله صح، كنا خلصنا الفصل بدري. وإحنا ماشيين، هندي أمثلة من نوع التفكير والمشاكل اللي أي مبرمج أو مصمم بيقابلها كل يوم. مش هنوصل لنسخة مرضية من البرنامج غير في نهاية الفصل الجاي.

خلي بالك إن في الفصل ده واللي بعده، الرحلة للوصول للنسخة النهائية — من خلال حلول جزئية وأفكار وأخطاء — أهم على الأقل قد أهمية النسخة النهائية، وأهم من تفاصيل اللغة اللي هنقابلها في السكة (وهنرجع لها بعدين).

** مراحل التطوير
دي شوية مصطلحات في تطوير البرامج. وإنت شغال على برنامج هتعدي بالمراحل دي أكتر من مرة:

- مرحله الAnalysis: تحدد اللي المفروض يتعمل وتكتب وصف للفهم الحالي بتاعك. الوصف ده بيتسمى requirements أو specification.
  مش هندخل في تفاصيل إزاي تتكتب، لأن ده برا نطاق الكورس، بس كل ما المشكلة تكبر، أهميتها بتزيد.

- مرحله الDesign: تعمل هيكل عام للسيستم، وتحدد الأجزاء اللي المفروض تتنفذ، وبيتواصلوا مع بعض إزاي. كجزء من الـdesign، تفكر في الأدوات (زي الـlibraries) اللي ممكن تساعدك تبني البرنامج.

- مرحله الImplementation: تكتب الكود، تصلح الـbugs، وتجرب إن كان بيعمل اللي المفروض يعمله.
