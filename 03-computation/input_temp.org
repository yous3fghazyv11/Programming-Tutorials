* التعامل مع الinput
هتلاحظ ان معظم البرامج اللي احنا كنا بنعملها لحد الان مش بتتعامل بشكل كويس مع الbad input، ولا حتي بيديك prompt كويسه تشتغل بيها.

الصح اني لما باجي اشغل برنامج مش ببص الاقي البرنامج واقف مش بيعمل حاجه بسبب انه مستني input، المفروض انه لو مستني input يعرفني انه مستني input والمفروض اكتب ايه بظبط، ولما اكتب حاجه غلط المفروض انه يتعامل معاها بشكل صح. شوف مثلا المثال دا:

#+begin_src C
int main() {
    std::string name;
    int age;
    while (std::cin >> name >> age)
        std::cout << "Hello, " << name << " (age " << age << ")\n";
}
#+end_src

دا برنامج عادي جدا شبه معظم البرامج اللي احنا كنا بنعملها دلوقتي، لو تفتكر اول مره عملنا فيها البرنامج دا كان في المحاضره اللي فاتت، بس كان بيشتغل مره واحده من غير الwhile loop.

كل اللي هو بيعمله انه بيستني منك input، اسمك وبعدها سنك، وبيقولك رساله فيها اسمك وسنك وهكذا لحد لما توقفه بEOF ب C-d او انك تدخله bad input زي مثلا انك تدخل سنك الاول قبل اسمك

مشكله البرنامج دا انه فيه كذا خطأ، تعالي نحاول نصلحهم واحد واحد بدايه بأول وأوضح خطأ وهو ان مفيش prompt! لو بعت البرنامج دا لصاحبك يجربه لازم تقوله انه المفروض انه يدخل اسمه وبعدها سنه. لأن غير كدا هو مش هيفهم البرنامج دا بيعمل ايه ولا عايز ايه.

خلينا نصلح المشكله دي ونحط prompt.

#+begin_src C

int main() {
    std::string name;
    int age;
    while (std::cout << "Enter your name and age:\n> ") {
        std::cin >> name >> age;
        std::cout << "Hello, " << name << " (age " << age << ")\n";
    }
}
#+end_src

بس هتلاحظ انك لو دخلت bad input ودخلت string علي age، او مثلا دخلتله eof، البرنامج هيفضل يطبع الprompt وال hello message بتاعتنا الي ما لا نهايه، ليه دا بيحصل؟

ده لأنك معدتش رابط شرط الloop بنتيجه الcin، الloop دي هتفضل مكمله الي ما لا نهايه بسبب ان الشرط بتاعها دايما هيتحقق.

بس برضو ليه مش بيقف مستني مني input؟ الprompt بتظهر بس مش بيستناني اكتب input،

السبب باختصار هو مفهوم الcin state، بعد لما بتدخله الbad input بتاعك ولنفترض مثلا انه كان 20 وبعدها yousef، هيدخل 20 علي name، ولما هيجي يدخل yousef علي age مش هيعرف علشان age دي int.

واللي هيحصل هنا ان الcin هتدخل في حاجه اسمها fail state، تقدر تتخيل انها هتزعل من اللي حصل دا ومش هترضي تشتغل تاني. علشان كدا في البرنامج بتاعنا السطر بتاع الcin مش هيشتغل تاني خالص بسبب اللي حصل دا، وهيفضل البرنامج بتاعك ينفذ شرط الloop ويطبع الprompt وبعدها يجي ينفذ الcin يلاقيها فيfail state فينزل علي السطر اللي بعده ويطبع الرساله ويعيد تاني الي ما لا نهايه.

علشان نفهم الموضوع دا بشكل افضل، بص مثلا المثال دا:

#+begin_src C
#include <iostream>
#include <string>

void print_cin_state() {
    std::cout << "cin.good(): " << std::cin.good() << '\n';
    std::cout << "cin.fail(): " << std::cin.fail() << '\n';
    std::cout << "cin.eof(): "  << std::cin.eof()  << '\n';
    std::cout << "cin.bad(): "  << std::cin.bad()  << '\n';
}

int main() {
    std::string name;
    int age;
    while (std::cout << "enter your name and age:\n> ") {
        if (std::cin >> name >> age) std::cout << "input statement executed\n";
        std::cout << "Hello, " << name << " (age " << age << ")\n";
        print_cin_state();
		std::cout << "\n\n";
    }
}
#+end_src

خلينا نحاول نفهم البرنامج دا سطر سطر بدايه من الmain، اول حاجه هتلاقي اننا عدلنا علي الcin statement وخليناها بتتنفذ جوا if-statemnt، وفي حاله ان عمليه الinput كانت ناجحه، هيقولنا ده.

تاني حاجه عملناها وهي function اسمها print_cin_state، هتلاقي ان الfunction دي بتطبع القيم بتاعه كل state من الstates بتاع الcin. والقيم دي بتبقي يا اما 0 يا اما 1 في دلاله علي الstate اللي active حاليا.

تعالي نجرب نشغل كدا البرنامج دا ونشوف هيعمل ايه عندي علي السيستم.

[[../images/cin_state_nodelay.png]]

اول حاجه هتلاقي انه قاللي ان الinput statement اتنفذت عادي، وقاللي برضو ان الstate بتاعه الcin حاليا هي good ومستني مني input تاني عادي.

تعالي بقا نجرب نكتب bad input او eof.

[[../images/cin_failed_nodelay.png]]

ده اللي حصل لما دخلتله رقم الأول قبل الstring. الحقيقه انه كتب حوالي 52000 سطر قبل ما انا اوقفه ب C-c في خلال حوالي 3 ثواني، دا ليه؟ لأن لو تلاحظ الstate بتاع cin هي failed، وده بسبب اني حاولت ادخل string في متغير من نوع int، علشان كدا الinput statement معادتش هتتنفذ وهتلاقي السطر اللي بيقولنا انها اتفذت معادش بيتطبع، وهيفضل البرنامج في حلقه لا نهائيه من الطباعه بسبب ان الشرط بتاع الloop دايما متحقق ودايما هيطبع الprompt ومش هيقف ابدا علشان ياخد input علشان الcin في حاله fail.

علشان نوضح الموضوع دا اكتر خلينا نزود السطور دي:

#+begin_src C
#include <chrono>
#include <thread>

int main() {
    std::string name;
    int age;
    while (std::cout << "enter your name and age:\n> ") {
        if (std::cin >> name >> age) std::cout << "input statement executed\n";
        std::cout << "Hello, " << name << " (age " << age << ")\n";
        print_cin_state();
		std::cout << "waiting...\n";
        std::this_thread::sleep_for(std::chrono::seconds(3));
    }
}
#+end_src

مش لازم نشرح بظبط اللي بيحصل هنا بس اللي عليك تعرفه ان السطر اللي ضيفناه في الmain دا لما بيجي يتنفذ بيخلي البرنامج يقف لمده 3 ثواني، وعلشان نستخدمه احتاجنا نستدعي الheader files اللي انت شايفها فوق دي

كل دا علشان بس نعرف نلقط بشكل افضل هو بيطبع ايه بدل ما هو بيطبع حوالي 10 تلاف سطر في الثانيه.

لما نيجي نشغل البرنامج دا هيطلعلنا دا:

[[../images/waiting.png]]

اهو كدا بقا نقدر نشوف اللي بيحصل بشكل افضل، هتلاقي ان لما بندخله yousef 22 عادي بيتصرف بشكل طبيعي زي المره اللي فاتت، بس لما دخلناله الbad input بتاعنا وحاول يدخل "yousef" علي age، الcin دخلت في fail state ومطبعش السطر بتاع الinput statement executed، وكمان قاللنا 1 جنب cin.fail والمره الجايه اللي طبع فيها الprompt مستناش ياخد input ودخل علي طول علي السطر اللي بعده علشان الcin في fail state وبيفضل هكذا في حلقه مفرغه.

ازاي نحل المشكله دي؟ هنحتاج اننا يدويا نعمل clear للstate بتاعه cin علشان ترجع تستقبل input تاني.

#+begin_src C
int main() {
    std::string name;
    int age;
    while (std::cout << "Enter you age followed by your name:\n> ") {
		if (std::cin.fail()) std::cin.clear();
        if (std::cin >> name >> age) std::cout << "input statement executed\n";
        std::cout << "Hello, " << name << " (age " << age << ")\n";
        print_cin_state();
		std::cout << "waiting...\n";
        std::this_thread::sleep_for(std::chrono::seconds(3));
    }
}
#+end_src

لما نيجي ننفذ البرنامج دا هتلاقي دا اللي بيحصل:

[[../images/cin_clear.png]]

زي ما انت شايف حتي بعد لما دخلناله bad input هو رجع ياخد مننا input تاني عادي بسبب اننا عملنا clear للcin state.

وتفتكر ان المشكله اتحلت والبرنامج بتاعنا بقا فيه prompt وبقا بيقدر يتعامل مع الbad input لحد ما تكمل استخدام البرنامج وتجرب تدخل بعد كدا الinput الصح وتكتشف انه بيعمل حاجه غريبه جدا:

[[../images/bad_input_buffer.png]]

هتلاحظ ان في الiteration لما دخلناله الbad input الstate بتاعه cin كانت fail، ليه؟ لأنه جه يدخل "yousef" في age معرفش، تفتكر "yousef" دي هتورح فين؟ هتروح للinput buffer.

هنا الstring بتاعنا "yousef" هيتخزن في حاجه اسمها input buffer علشان يمكن نستخدمه بعد كدا. علشان نوضح الموضوع دا بشكل احسن، بص مثلا المثال دا:

#+begin_src C
int main() {
    int age = 0;
    while(std::cout << "enter your age: ") {
        std::cin >> age;
        std::cout << "your age is: " << age << '\n';
    }
}
#+end_src

لو جينا نشغل البرنامج دا ونديله كذا input ورا بعض هتلاقي دا اللي بيحصل:

[[../images/age_input_buffer.png]]

هنا 20 هتتقرأ في age عادي، بس 21 و 22 و 23 هيتخزنوا في الinput buffer علشان نستخدمهم بعد كدا.

علشان كدا هتلاقي انه بيقوللي your age is: 20 عادي بس بعد كدا لما بيجي ياخد input تاني مش بيستني اني اديله input وعلطول بياخد 21 من الinput buffer ويحطها في age، وبعد كدا المره اللي بعدها بيعمل نفس الكلام مع 22 وهكذا

علشان كدا في البرنامج بتاعنا فوق، لما دخلناله 22 بعدها "yousef" وهو حط 22 في name ومعرفش يحط "yousef" في age، حطها في الinput buffer ودخل fail state،
في الiteration اللي بعدها احنا عملنا clear للfail state فهيقرأ تاني، بس علي الرغم من ان الprompt بتقول enter your name and age، هو فعليا الname بالفعل متاخد ل"yousef" لأنه
لما جه يقرأ لقي ان هو هو عنده "yousef" من الinput buffer ف ~cin >> name~ خدتها وهو دلوقتي مستني مني الinput بتاع ~cin >> age~ وانا دخلتله yousef و 22، فهيجي يدخل yousef في age مش هيعرف
وهيحطها في الinput buffer هي و 22 ويدخل fail state، علشان كدا هتلاقيه طبع yousef اللي من الinput buffer بس مطبعش الage وقالك fail 1 ومقالش input statement executed مع ان الinput بتاعي كان سليم.

الiteration اللي بعدها هو مش هيستني منك input اصلا لأنه بالفعل عنده "yousef" و 22 في الinput buffer، هياخدهم عادي ويقولك input statement executed وهيقولك cin.good ب 1 دلاله علي ان كل حاجه مشيت زي الفل.

لفه طويله صح؟

ازاي بقا نلغي التصرف دا؟

#+begin_src C
#include <iostream>
#include <limits>
#include <string>

int main() {
    std::string name;
    int age;
    while (std::cout << "enter your name and age:\n> ") {
        std::cin >> name >> age;
        if (std::cin.fail()) {
            std::cout << "bad input, clearning the input buffer\n";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            continue;
        }
        std::cout << "Hello, " << name << " (age " << age << ")\n";
    }
}
#+end_src

زي ما انت شايف انا نضفت الmain شويه، الزياده هنا هو اني بقيت بشوف لو الcin failed وبعرف الuser انه دخل bad input وبclear الcin state وكمان بخلي الcin تتجاهل او تشيل اي حاجه في الinput buffer،
دا عن طريق الfunction اللي اسمها =()std::cin.ignore= وهتلاحظ انها بيخشلها two arguments، اول argument هو عدد الحروف اللي هتشيلها من الinput buffer، وتاني argument هو توقف تشيل لحد فين بظبط.

في حالتنا اول argument واللي هو ~()std::numeric_limits<std::streamsize>::max~ دا مجرد function بترجع اكبر قيمه ينفع تتخزن في نوع معين واللي بتحدده جوا ال <>، في الحاله دي هو ~std::streamsize~

علي سبيل المثال:

#+begin_src C
std::cout << std::numeric_limits<int>::max() << '\n';
#+end_src

هيطلعلك رقم غالبا زي: 2147483647 وده اكبر رقم يقدر الint يستحمله.

في حالتنا هنا ~()std::numeric_limits<std::streamsize>::max~ دي بترجع اكبر رقم من الحروف يقدر الinput stream يستحملها،.

لذلك السطر: =;std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n')= دا بيقول ببساطه فضي الinput stream، افضي منه قد ايه؟ بعدد الحروف اللي يقدر يستحملها (مجرد طريقه حنيوكه شويه علشان نقول فضيه كله) طب ابطل اعمل ignore اول لما الاقي ايه؟ اول لما تلاقي ~n\~.

وده بيضمن ان مفيش اي حاجه من الbad input هتتخزن في الbuffer، وبكده احنا لما هنعمل =continue= وهنخلي البرنامج يتجاهل الiteration الحاليه ونعمل الiteration الجايه هنبدأ بgood cin state وكمان input buffer فاضي.

[[../images/cin_ignore.png]]

زي ما انت شايف اخيرا البرنامج بتاعنا بقي منيع ضد الbad input.

وتظن ان خلاص كدا بس تكتشف ان لسه في مشكله بسيطه جدا، هنقفل البرنامج ازاي؟ احنا كنا بنقفله عن طريق اننا نديله bad input، دلوقتي معدش ينفع، فهنيجي نقفله ب C-d او eof character هتلاقيه بيقولك:

[[../images/eof_problem.png]]

ليه؟ علشان نفهم دا بيحصل ليه هنحتاج نرجع الfunction الجميله بتاعتنا بتاعه =()print_cin_state= هي و ~()sleep_for~.

#+begin_src C
int main() {
    std::string name;
    int age;
    while (std::cout << "enter your name and age:\n> ") {
        std::cin >> name >> age;
        print_cin_state();
        std::cout << "Hello, " << name << " (age " << age << ")\n";
        std::this_thread::sleep_for(std::chrono::seconds(3));
        std::cout << "\n\n";
    }
}
#+end_src

لما هنيجي نشغل الكود دا ونديله eof character او C-d هيحصل الاتي:

[[../images/eof_problem2.png]]

اللي انا عملته ان اول لما البرنامج اشتغل بدل ما اديله input قمت مديله eof character علطول، زي ما انت شايف دا هيدخل cin في حاله fail و eof الاتنين مع بعض!

لما نرجع نبص بقا علي البرنامج الأول ونزودله =()print_cin_state= هي و ~()sleep_for~ علشان نشوف في ايه:

#+begin_src C
int main() {
    std::string name;
    int age;
    while (std::cout << "enter your name and age:\n> ") {
        std::cin >> name >> age;
        if (std::cin.fail()) {
            std::cout << "bad input, clearning the input buffer\n";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            print_cin_state();
            std::this_thread::sleep_for(std::chrono::seconds(3));
            continue;
        }
        std::cout << "Hello, " << name << " (age " << age << ")\n";
    }
}
#+end_src

هتلاقي بيطلعلك المنظر دا لما تشغله:

[[../images/eof_problem3.png]]

زي ما انت شايف ال =()std::cin.clear= بتعمل clear للfail state بس مش بتعمل clear لل eof state! والeof state زيها زي الfail بتخلي cin متشتغلش.

ودي الحقيقه حاجه كويسه، لأن لو كانت بتعمل clear للeof state كمان احنا مكناش هنعرف نفرق بينهم، واحنا عايزين نفرق بينهم، عايزين في حاله الfail نعمل ignore لكل حاجه في الinput buffer ونبدأ تاني، وفي حاله الeof عايزين نخرج بره البرنامج.

دا ممكن يتعمل بالشكل دا:

#+begin_src C
int main() {
    std::string name;
    int age;
    while (std::cout << "enter your name and age:\n> ") {
        std::cin >> name >> age;
        if (std::cin.fail()) {
            if (std::cin.eof()) {
                std::cout << "\nExitting...\n";
                return 0;
            }
            std::cout << "bad input\n";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            continue;
        }
        std::cout << "Hello, " << name << " (age " << age << ")\n";
    }
}
#+end_src

المرادي بقا بجد البرنامج دا بيهندل الinput صح، بعد لما بياخد input بيتcheck لو الcin في fail state، لو اه بيشوف ايه سبب الfail دا، هل هو eof؟ هل اليوزر ضغط C-d؟ لو اه يبقي هو عايز يخرج من البرنامج فبنقوله اننا هنخرج من البرنامج وبنعمل ~;return 0~ وطبعا لما بنعمل return دا بيterminate الfunction وفي الحاله دي احنا بنterminate الmain فبنterminate البرنامج.

طب لو مكانش eof؟ يبقي اليوزر دخل bad input، في الحاله دي بنعرفه ان الinput اللي هو دخله دا كان bad input وبنتجاهل الinput دا وبنclear الstate بتاعه cin من fail استعدادا لتلقي input جديد، وبنتجاهل الbad input اللي هو دخله من الinput buffer علشان ميعملناش مشاكل تاني. it's quite perfect right now

كدا البرنامج دا:
- فيه prompt
- بيهندل الbad input بشكل كويس
- بيهندل الeof بشكل كويس
